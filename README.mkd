# VisClient

vis_client é um cliente http para envio de requisições síncronas em background do projeto de visualização do [redu](https://github.com/redu/redu).

## Introdução
VisClient foi construído para permitir criação de jobs ([delayed_job](https://github.com/collectiveidea/delayed_job)) que sejam
responsáveis por enviar as requisições síncronas através do [Faraday](https://github.com/lostisland/faraday) e falhar caso Vis não
consiga inserir a notificação.

##Gems utilizadas
* [faraday](https://github.com/lostisland/faraday)
* [roar](https://github.com/apotonick/roar)
* [configurable](https://github.com/thinkerbot/configurable)

## Instalação
### No Gemfile
```ruby
gem 'vis_client', :git => 'git@github.com:redu/vis_client.git'
```

## Uso
### Configuração
É possível configurar VisClient para determinados usos, por exemplo para desenvolvimento é possível dizer a VisClient para
que não envie as notificações e não crie jobs para isso, isso feito modificando a configuração ```deliver_notifications```.
Assim como, é possível informar o host que será enviado as notificações através do ```endpoint```. Por último é possível
modificar o tipo de logger através do atributo ```logger```.

```ruby
VisClient.configure do |config|
  config.deliver_notifications = !(Rails.env.development?) #default true
  config.logger = Rails.logger #default Logger.new(STDOUT)
  config.endpoint = Redu::Application.config.vis_client[:host] if (Rails.env.development? || Rails.env.test?) # "http://vis.redu.com.br/"
end
```

É aconselhável que essa configuração fique em um arquivo separado na pasta ```config/initializers/```, chamado ```vis_client.rb```.

### Enviando requisições

Por enquanto, só há um método para envio de requisições: 

```ruby
VisClient.notify_post(resource, type, *args)
```

Ele aceita três parâmetros. O primeiro é o ```resource```, variável responsável por dizer o destino da requisição, exemplo ```/hierarchy_notifications.json```.
O segundo é o tipo de notificação por exemplo ```enrollment``` ou ```subject_finalized```. E o terceiro são os objetos que serão 
serializados para envio podendo ser um único objeto ou array deles, exemplo:

```ruby
[#<Enrollment id: 46, user_id: 139, subject_id: 21, created_at: "2011-02-10 20:10:02", updated_at: "2011-02-10 20:10:02", role: 3, graduated: false, grade: 0.0>,
#<Enrollment id: 66, user_id: 57, subject_id: 58, created_at: "2011-02-10 20:10:03", updated_at: "2011-02-10 20:10:03", role: 2, graduated: false, grade: 0.0>,
#<Enrollment id: 78, user_id: 5, subject_id: 78, created_at: "2011-02-10 20:10:05", updated_at: "2011-02-10 20:10:05", role: 3, graduated: false, grade: 0.0>,
#<Enrollment id: 79, user_id: 5, subject_id: 80, created_at: "2011-02-10 20:10:05", updated_at: "2011-02-10 20:10:05", role: 3, graduated: false, grade: 0.0>,
#<Enrollment id: 96, user_id: 5, subject_id: 91, created_at: "2011-02-16 18:49:42", updated_at: "2011-02-16 18:49:42", role: 3, graduated: false, grade: 0.0>] 
```
Para todo objeto será preciso criar um [Representer](https://github.com/apotonick/roar#representers), este
representer deverá respeitar a API do [Projeto de Visualização](https://github.com/redu/vis). Exemplo:

```ruby
module EnrollmentVisRepresenter
  include Roar::Representer::JSON
  include Roar::Representer::Feature::Hypermedia

  property :type
  property :user_id
  property :subject_id
  property :space_id
  property :course_id
  property :created_at
  property :updated_at

  def space_id
    self.subject.space.id
  end

  def course_id
    self.subject.space.course.id
  end
end
```

### Exemplo de chamada
```ruby
VisClient.notify_delayed("/hierarchy_notifications.json", "enrollment", enrollments.compact)
```

##TODO
1. Remover o resource da chamada de ```notify_delayed``` e colocar na configuração do ```endpoint```.
2. Retirar a senha e usuário que autenticam o usuário de vis do código.
3. Enviar várias requisições em paralelo.

## Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request


<img src="https://github.com/downloads/redu/redupy/redutech-marca.png" alt="Redu Educational Technologies" width="300">

This project is maintained and funded by [Redu Educational Techologies](http://tech.redu.com.br).

# Copyright

Copyright (c) 2012 Redu Educational Technologies

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

